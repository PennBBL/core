import json
import bson

from .. import base
from .. import config
from .. import util

log = config.log

EIGHTEEN_YEARS_IN_SEC = 568036800

# TODO: use enum
# ReportType = util.Enum('Report', {
#     'site'      : SiteReport,
#     'project'   : ProjectReport
# })

class ReportHandler(base.RequestHandler):

    def __init__(self, request=None, response=None):
        super(ReportHandler, self).__init__(request, response)

    def get(self, report_type, **kwargs):
        report = None
        if report_type == 'site':
            report = SiteReport()

        elif report_type == 'project':
            project_list = self.request.GET.getall('projects')
            if len(project_list) < 1:
                self.abort(400, 'List of projects requried for Project Report')

            report = ProjectReport(project_list,
                                   start_date=self.get_param('start_date'),
                                   end_date=self.get_param('start_date'))

        else:
            # They should never even get this far because of filtering in api.py
            self.abort(400, 'The report type {} is not supported'.format(report_type))

        return report.build()


class Report(object):
    def __init__(self):
        self.placeholder = None

    def build(self):
        """
        Build and return a json report
        """
        raise NotImplementedError()

class SiteReport(Report):
    """
    Report of statistics about the site, generated by Site Managers

    Report includes:
      - number of groups
      - number of projects per group
      - number of sessions per group
    """

    def build(self):
        report = {}

        groups = config.db.groups.find({})
        report['group_count'] = groups.count()
        report['groups'] = []

        for g in groups:
            group = {}
            group['name'] = g.get('name')

            project_ids = [p['_id'] for p in config.db.projects.find({'group': group['name']}, [])]
            group['project_count'] = len(project_ids)

            group['session_count'] = config.db.sessions.count({'project': {'$in': project_ids}})
            report['groups'].append(group)

        return report

class ProjectReport(Report):
    """
    Report of statistics about a list of projects, generated by
    Project Admins or Group Admins. Will only include a date range
    when provided by the client.

    Report includes:
      - Project Name
      - Group Name
      - Project Admin(s)
      - Number of Sessions
      - Unique Subjects
      - Male Subjects
      - Female Subjects
      - Subjects with sex type Other
      - Subjects under 18
      - Subjects over 18
    """

    def __init__(self, projects, start_date=None, end_date=None):
        super(ProjectReport, self).__init__()
        self.projects = projects
        self.start_date = start_date
        self.end_date = end_date

    def build(self):
        report = {}
        report['projects'] = []

        projects = config.db.projects.find({'_id': {'$in': map(bson.ObjectId, self.projects)}})
        for p in projects:
            project = {}
            project['name'] = p.get('label')
            project['group_name'] = p.get('group')

            admins = []
            for perm in p.get('permissions', []):
                if perm.get('access') == 'admin':
                    admins.append(perm.get('_id'))
            admin_objs = config.db.users.find({'_id': {'$in': admins}})
            # This could also be a mongo projection aggregation
            project['admins'] = map(lambda x: x.get('firstname','')+' '+x.get('lastname',''), admin_objs)

            project['session_count'] = config.db.sessions.count({'project': p['_id']})

            match_pid =         {'$match': {'project': p['_id']}}
            group_by_id =       {'$group': {'_id': '$subject._id'}}
            group_by_sex =      {'$group': {'_id': '$subject._id', 'sex': { '$first': '$subject.sex' }}}
            group_by_avg_age =  {'$group': {'_id': '$subject._id', 'age': { '$avg': '$subject.age'}}}

            pipeline = [
                {'$match': {'project': p['_id'], 'subject._id': { '$exists': True}}},
                {'$group': {'_id': '$subject._id'}},
                {'$group': {'_id': 1, 'count': { '$sum': 1 }}}
            ]
            project['subjects_count'] = config.db.command('aggregate', 'sessions', pipeline=pipeline)

            pipeline = [
                {'$match': {'project': p['_id'], 'subject._id': { '$exists': True}, 'subject.sex': { '$exists': True}}},
                {'$group': {'_id': '$subject._id', 'sex': { '$first': '$subject.sex' }}},
                {'$group': {'_id': '$sex', 'count': { '$sum': 1 }}}
            ]
            result = config.db.command('aggregate', 'sessions', pipeline=pipeline)
            project['males_count'] = result
            project['female_count'] = result
            project['other_count'] = result

            pipeline = [
                {'$match': {'project': p['_id'], 'subject._id': { '$exists': True}, 'subject.age': { '$exists': True}}},
                {'$group': {'_id': '$subject._id', 'age': { '$avg': '$subject.age'}}},
                {'$project': {'_id': 1, 'over_18': { '$gte': [ '$age', 568036800]}}},
                {'$group': {'_id': 'over_18', 'count': { '$sum': 1 }}}
            ]
            result = config.db.command('aggregate', 'sessions', pipeline=pipeline)
            project['over_18_count'] = result
            project['under_18_count'] = result

            report['projects'].append(project)

        return report
