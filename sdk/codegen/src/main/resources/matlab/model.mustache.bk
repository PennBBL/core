{{#models}}
{{#model}}
classdef {{classname}}
    properties
    {{#vars}}
        {{name}}
    {{/vars}}
    end
    methods
        function obj = {{classname}}(varargin)
            p = inputParser;
            {{#vars}}
            addParameter(p, '{{name}}', {{#defaultValue}}{{defaultValue}}{{/defaultValue}}{{^defaultValue}}[]{{/defaultValue}});
            {{/vars}}

            parse(p, varargin{:});

            {{#vars}}
            obj.{{name}} = p.Results.{{name}};
            {{/vars}}
        end
        function result = toJson(obj)
            m = containers.Map
            {{#requiredVars}}
            m('{{baseName}}') = obj.{{name}};
            {{/requiredVars}}
            {{#optionalVars}}
            if ~isempty(obj.{{name}})
                m('{{baseName}}') = obj.{{name}};
            end
            {{/optionalVars}}
            result = jsonwrite(m);
        end
    end
    methods(Static)
        function obj = fromJson(json)
            s = jsonread(json, struct('ReplacementStyle', 'hex'));
            obj = {{classname}};
            {{#vars}}
            if isfield(s, '{{vendorExtensions.x-matlab-baseName}}')
                obj.{{name}} = s.{{vendorExtensions.x-matlab-baseName}};
            end
            {{/vars}}
        end
    end
end
{{/model}}
{{/models}}
