        function [returnData, resp] = addNodesToCollection(obj, collectionId, level, nodeIds, varargin)
            nodes = cellfun(@(id) flywheel.model.CollectionNode('id', id, 'level', level), ...
                nodeIds, 'UniformOutput', false);
            contents = flywheel.model.CollectionOperation('operation', 'add', 'nodes', nodes);
            update = flywheel.model.Collection('contents', contents);
            [returnData, resp] = obj.collectionsApi.modifyCollection(collectionId, update, varargin{:});
        end

        function [returnData, resp] = addSessionsToCollection(obj, collectionId, sessionIds, varargin)
            [returnData, resp] = obj.addNodesToCollection(collectionId, 'session', sessionIds, varargin{:});
        end

        function [returnData, resp] = addAcquisitionsToCollection(obj, collectionId, acquisitionIds, varargin)
            [returnData, resp] = obj.addNodesToCollection(collectionId, 'acquisition', acquisitionIds, varargin{:});
        end

        function [returnData, resp] = changeJobState(obj, jobId, state, varargin)
            [returnData, resp] = obj.modifyJob(jobId, struct('state', state), varargin{:});
        end

        function [returnData, resp] = resolve(obj, path, varargin)
            [returnData, resp] = obj.resolvePath(flywheel.model.ResolverInput('path', split(path, '/')), varargin{:});
        end

        function [returnData, resp] = lookup(obj, path, varargin)
            [returnData, resp] = obj.lookupPath(flywheel.model.ResolverInput('path', split(path, '/')), varargin{:});
        end

        function view = View(obj, varargin)
            builder = flywheel.ViewBuilder(varargin);
            view = builder.build();
        end

    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions.x-sdk-modify-wrapper}}
        function [returnData, resp] = {{wrapperId}}(obj, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}varargin)
            body = struct( '{{key}}', body );
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}varargin{:});
        end

    {{/vendorExtensions.x-sdk-modify-wrapper}}
    {{#vendorExtensions.x-sdk-download-file-param}}
        function [returnData, resp] = {{operationId}}AsData(obj, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}varargin)
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}[], varargin{:});
        end

    {{/vendorExtensions.x-sdk-download-file-param}}
    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}
