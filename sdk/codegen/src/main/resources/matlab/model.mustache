{{#models}}
{{#model}}
classdef {{classname}} < ModelBase
    % {{classname}}
    {{#description}}
    % {{{.}}}
    {{/description}}
    %
    % {{classname}} Properties:
    {{#vars}}
    %    {{name}} {{#description}} - {{{.}}}{{/description}}
    {{/vars}}
    %
    % {{classname}} Methods:
    %    toJson - Convert the object to a Map that can be encoded to json
    %    struct - Convert the object to a struct
    properties (Constant)
        propertyMap = containers.Map({ {{#vars}}'{{name}}'{{#hasMore}}, {{/hasMore}}{{/vars}} }, ...
            { {{#vars}}'{{baseName}}'{{#hasMore}}, {{/hasMore}}{{/vars}} })
    end
    methods
        function obj = {{classname}}(varargin)
            obj@ModelBase({{classname}}.propertyMap);

            p = inputParser;
            {{#vars}}
            addParameter(p, '{{name}}', {{#defaultValue}}{{defaultValue}}{{/defaultValue}}{{^defaultValue}}[]{{/defaultValue}});
            {{/vars}}

            parse(p, varargin{:});

            {{#vars}}
            if ~isempty(p.Results.{{name}})
                obj.props('{{baseName}}') = p.Results.{{name}};
            end
            {{/vars}}
        end
        function result = toJson(obj)
            result = containers.Map;

            {{#vars}}
            if isKey(obj.props, '{{baseName}}')
                {{#isPrimitiveType}}
                result('{{baseName}}') = obj.props('{{baseName}}');
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                result('{{baseName}}') = obj.props('{{baseName}}').toJson();
                {{/isListContainer}}
                {{#isListContainer}}
                result('{{baseName}}') = cellfun(@(x) x.toJson(), obj.props('{{baseName}}'), 'UniformOutput', false);
                {{/isListContainer}}
                {{/isPrimitiveType}}
            end
            {{/vars}}
        end
        function result = struct(obj)
            result = struct;

            {{#vars}}
            if isKey(obj.props, '{{baseName}}')
                {{#isPrimitiveType}}
                result.{{name}} = obj.props('{{baseName}}');
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                result.{{name}} = struct(obj.props('{{baseName}}'));
                {{/isListContainer}}
                {{#isListContainer}}
                result.{{name}} = cellfun(@(x) struct(x), obj.props('{{baseName}}'));
                {{/isListContainer}}
                {{/isPrimitiveType}}
            else
                result.{{name}} = {};
            end
            {{/vars}}
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                {{#vars}}
                if isKey(obj.props, '{{baseName}}')
                    propList.{{name}} = obj.props('{{baseName}}');
                else
                    propList.{{name}} = [];
                end
                {{/vars}}
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json)
            obj = {{classname}};
            {{#vars}}
            if isfield(json, '{{vendorExtensions.x-matlab-baseName}}')
                {{#isPrimitiveType}}
                obj.props('{{baseName}}') = json.{{vendorExtensions.x-matlab-baseName}};
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                obj.props('{{baseName}}') = {{complexType}}.fromJson(json.{{vendorExtensions.x-matlab-baseName}});
                {{/isListContainer}}
                {{#isListContainer}}
                obj.props('{{baseName}}') = arrayfun(@(x) {{complexType}}.fromJson(x), json.{{vendorExtensions.x-matlab-baseName}}, 'UniformOutput', false);
                {{/isListContainer}}
                {{/isPrimitiveType}}
            end
            {{/vars}}
        end
    end
end
{{/model}}
{{/models}}
