{{#models}}
{{#model}}
% {{classname}}{{#description}} - {{{.}}}{{/description}}
%
% {{classname}} Properties:
{{#vars}}
%    {{vendorExtensions.x-matlab-paddedName}} {{#description}} - {{{.}}}{{/description}}
{{/vars}}
%
% {{classname}} Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
classdef {{classname}} < {{packageName}}.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        {{#hasVars}}
        propertyMap = containers.Map({ {{#vars}}'{{name}}'{{#hasMore}}, {{/hasMore}}{{/vars}} }, ...
            { {{#vars}}'{{baseName}}'{{#hasMore}}, {{/hasMore}}{{/vars}} });
        {{/hasVars}}
        {{^hasVars}}
        propertyMap = [];
        {{/hasVars}}
        {{#discriminator}}

        discriminatorValueClassMap = containers.Map({ {{#children}}'{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{.}}}{{/vendorExtensions.x-discriminator-value}}'{{^-last}}, {{/-last}}{{/children}} }, ...
            { {{#children}}'{{modelPackage}}.{{classname}}.fromJson'{{^-last}}, {{/-last}}{{/children}} });
        {{/discriminator}}
    end
    methods
        function obj = {{classname}}(varargin)
            obj@{{packageName}}.ModelBase({{modelPackage}}.{{classname}}.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                {{#vars}}
                {{#vendorExtensions.x-sdk-positional}}
                addRequired(p, '{{name}}');
                {{/vendorExtensions.x-sdk-positional}}
                {{^vendorExtensions.x-sdk-positional}}
                addParameter(p, '{{name}}', {{#defaultValue}}{{defaultValue}}{{/defaultValue}}{{^defaultValue}}[]{{/defaultValue}});
                {{/vendorExtensions.x-sdk-positional}}
                {{/vars}}
                {{^vars}}
                p.KeepUnmatched = true;
                {{/vars}}

                parse(p, varargin{:});

                {{#vars}}
                if ~isempty(p.Results.{{name}})
                    obj.props_('{{baseName}}') = p.Results.{{name}};
                end
                {{/vars}}
                {{^vars}}
                names = fieldnames(p.Unmatched);
                for i = 1:length(names)
                    name = names{i};
                    obj.props_(name) = p.Unmatched.(name);
                end
                {{/vars}}
            end
        end
        function result = toJson(obj)
            {{#hasVars}}
            result = containers.Map;
            {{/hasVars}}
            {{#vars}}
            if isKey(obj.props_, '{{baseName}}')
                {{#isPrimitiveType}}
                result('{{baseName}}') = obj.props_('{{baseName}}');
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                result('{{baseName}}') = obj.props_('{{baseName}}').toJson();
                {{/isListContainer}}
                {{#isListContainer}}
                result('{{baseName}}') = cellfun(@(x) x.toJson(), obj.props_('{{baseName}}'), 'UniformOutput', false);
                {{/isListContainer}}
                {{/isPrimitiveType}}
            {{#vendorExtensions.x-sdk-include-empty}}
            else
                {{#defaultValue}}
                result('{{baseName}}') = {{defaultValue}};
                {{/defaultValue}}
                {{^defaultValue}}
                {{^isListContainer}}
                result('{{baseName}}') = {{modelPackage}}.{{complexType}}().toJson();
                {{/isListContainer}}
                {{#isListContainer}}
                result('{{baseName}}') = [];
                {{/isListContainer}}
                {{/defaultValue}}
            {{/vendorExtensions.x-sdk-include-empty}}
            end
            {{/vars}}
            {{^vars}}
            {{#vendorExtensions.x-matlab-additionalProperties}}
            result = containers.Map;
            propKeys = keys(obj.props_);
            for i = 1:length(propKeys)
                key = propKeys{i};
                {{#isPrimitiveType}}
                result(key) = obj.props_(key);
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                result(key) = obj.props_(key).toJson();
                {{/isListContainer}}
                {{#isListContainer}}
                result(key) = cellfun(@(x) x.toJson(), obj.props_(key), 'UniformOutput', false);
                {{/isListContainer}}
                {{/isPrimitiveType}}
            end
            {{/vendorExtensions.x-matlab-additionalProperties}}
            {{^additionalPropertiesType}}
            result = obj.props_;
            {{/additionalPropertiesType}}
            {{/vars}}
        end
        function result = struct(obj)
            result = struct;

            {{#vars}}
            if isKey(obj.props_, '{{baseName}}')
                {{#isPrimitiveType}}
                result.{{name}} = obj.props_('{{baseName}}');
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                result.{{name}} = struct(obj.props_('{{baseName}}'));
                {{/isListContainer}}
                {{#isListContainer}}
                result.{{name}} = cellfun(@(x) struct(x), obj.props_('{{baseName}}'));
                {{/isListContainer}}
                {{/isPrimitiveType}}
            else
                result.{{name}} = {};
            end
            {{/vars}}
            {{^vars}}
            propKeys = keys(obj.props_);
            for i = 1:length(propKeys)
                key = propKeys{i};
                {{#vendorExtensions.x-matlab-additionalProperties}}
                {{#isPrimitiveType}}
                result.(key) = obj.props_(key);
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                result.(key) = struct(obj.props_(key));
                {{/isListContainer}}
                {{#isListContainer}}
                result.(key) = cellfun(@(x) struct(x), obj.props_(key), 'UniformOutput', false);
                {{/isListContainer}}
                {{/isPrimitiveType}}
                {{/vendorExtensions.x-matlab-additionalProperties}}
                {{^additionalPropertiesType}}
                result.(key) = obj.props_(key);
                {{/additionalPropertiesType}}
            end
            {{/vars}}
        end
        function result = returnValue(obj)
            {{#vendorExtensions.x-sdk-return}}
            result = obj.props_('{{.}}');
            {{/vendorExtensions.x-sdk-return}}
            {{^vendorExtensions.x-sdk-return}}
            result = obj;
            {{/vendorExtensions.x-sdk-return}}
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                {{#vars}}
                if isKey(obj.props_, '{{baseName}}')
                    propList.{{name}} = obj.props_('{{baseName}}');
                else
                    propList.{{name}} = [];
                end
                {{/vars}}
                {{^vars}}
                propKeys = keys(obj.props_);
                for i = 1:length(propKeys)
                    key = propKeys{i};
                    propList.(key) = obj.props_(key);
                end
                {{/vars}}
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        {{^discriminator}}
        function obj = fromJson(json)
            obj =  {{modelPackage}}.{{classname}};
            {{#vars}}
            if isfield(json, '{{vendorExtensions.x-matlab-baseName}}')
                {{#isPrimitiveType}}
                obj.props_('{{baseName}}') = json.{{vendorExtensions.x-matlab-baseName}};
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                obj.props_('{{baseName}}') = {{modelPackage}}.{{complexType}}.fromJson(json.{{vendorExtensions.x-matlab-baseName}});
                {{/isListContainer}}
                {{#isListContainer}}
                obj.props_('{{baseName}}') = {{packageName}}.ModelBase.cellmap(@(x)  {{modelPackage}}.{{complexType}}.fromJson(x), json.{{vendorExtensions.x-matlab-baseName}});
                {{/isListContainer}}
                {{/isPrimitiveType}}
            end
            {{/vars}}
            {{^vars}}
            names = fieldnames(json);
            for i = 1:length(names)
                name = names{i};
                {{#vendorExtensions.x-matlab-additionalProperties}}
                {{#isPrimitiveType}}
                obj.props_(name) = json.(name);
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{^isListContainer}}
                obj.props_(name) =  {{modelPackage}}.{{complexType}}.fromJson(json.(name));
                {{/isListContainer}}
                {{#isListContainer}}
                obj.props_(name) = {{packageName}}.ModelBase.cellmap(@{{modelPackage}}.{{complexType}}.fromJson, json.(name));
                {{/isListContainer}}
                {{/isPrimitiveType}}
                {{/vendorExtensions.x-matlab-additionalProperties}}
                {{^additionalPropertiesType}}
                obj.props_(name) = json.(name);
                {{/additionalPropertiesType}}
            end
            {{/vars}}
        end
        {{/discriminator}}
        {{#discriminator}}
        function result = fromJson(json)
            discriminatorValue = [];

            if isfield(json, '{{vendorExtensions.x-matlab-discriminator}}')
                discriminatorValue = json.{{vendorExtensions.x-matlab-discriminator}};
            {{#vendorExtensions.x-matlab-alt-discriminator}}
            elseif isfield(json, '{{vendorExtensions.x-matlab-alt-discriminator}}')
                discriminatorValue = json.{{vendorExtensions.x-matlab-alt-discriminator}};
            {{/vendorExtensions.x-matlab-alt-discriminator}}
            end

            if isKey({{modelPackage}}.{{classname}}.discriminatorValueClassMap, discriminatorValue)
                result = feval({{modelPackage}}.{{classname}}.discriminatorValueClassMap(discriminatorValue), json);
            else
                result = [];
            end
        end
        {{/discriminator}}
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, '{{modelPackage}}.{{classname}}')
                    obj = {{modelPackage}}.{{classname}}(obj);
                end
                {{#vars}}
                if isKey(obj.props_, '{{baseName}}')
                    {{^isPrimitiveType}}
                    {{^isListContainer}}
                    obj.props_('{{baseName}}') =  {{modelPackage}}.{{complexType}}.ensureIsInstance(obj.props_('{{baseName}}'));
                    {{/isListContainer}}
                    {{#isListContainer}}
                    obj.props_('{{baseName}}') = {{packageName}}.ModelBase.cellmap(@(x) {{modelPackage}}.{{complexType}}.ensureIsInstance(x), obj.props_('{{baseName}}'));
                    {{/isListContainer}}
                    {{/isPrimitiveType}}
                end
                {{/vars}}
                {{^vars}}
                {{#vendorExtensions.x-matlab-additionalProperties}}
                {{^isPrimitiveType}}
                propKeys = keys(obj.props_);
                for i = 1:length(propKeys)
                    key = propKeys{i};
                    {{^isListContainer}}
                    obj.props_(key) =  {{modelPackage}}.{{complexType}}.ensureIsInstance(obj.props_(key));
                    {{/isListContainer}}
                    {{#isListContainer}}
                    obj.props_(key) = {{packageName}}.ModelBase.cellmap(@(x) {{modelPackage}}.{{complexType}}.ensureIsInstance(x), obj.props_(key));
                    {{/isListContainer}}
                end
                {{/isPrimitiveType}}
                {{/vendorExtensions.x-matlab-additionalProperties}}
                {{/vars}}
            end
        end
    end
end
{{/model}}
{{/models}}
