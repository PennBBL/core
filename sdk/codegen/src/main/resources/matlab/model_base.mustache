% ModelBase - Base class for all API models
classdef ModelBase < matlab.mixin.CustomDisplay
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        props_
        propMap_
    end
    methods
        function obj = ModelBase(propertyMap)
            obj.props_ = containers.Map;
            obj.propMap_ = propertyMap;
        end
        function sref = subsref(obj, s)
            if s(1).type == '.'
                sref = {{packageName}}.ModelBase.recursiveRef(obj, s);
            else
                error('subsref', 'Not a supported subscripted reference')
            end
        end
        function obj = subsasgn(obj, s, val)
            if s(1).type == '.'
                obj = {{packageName}}.ModelBase.recursiveAsgn(obj, s, val);
            else
                error('subsasgn', 'Not a supported subscripted reference')
            end
        end
    end
    methods(Static)
        function result = deserializeValue(val, typename)
            if strcmp(typename, 'datetime')
                result = {{packageName}}.ModelBase.deserializeDatetime(val);
            else
                result = val;
            end
        end
        function result = serializeValue(val, typename)
            if strcmp(typename, 'datetime')
                result = {{packageName}}.ModelBase.serializeDatetime(val);
            else
                result = val;
            end
        end
        function result = deserializeDatetime(val)
            if isempty(val)
                result = val;
            else
                result = datetime(val, 'TimeZone', 'UTC', 'InputFormat', 'yyyy-MM-dd''T''HH:mm:ss.SSSSSSXXXXX');
            end
        end
        function result = serializeDatetime(val)
            if isempty(val)
                result = val;
            else
                result = char(datetime(val, 'Format', 'yyyy-MM-dd''T''HH:mm:ss.SSSSSSXXXXX'));
            end
        end
        % TODO: Is there a better way to do this?
        function obj = recursiveAsgn(obj, s, val)
            if isempty(s)
                obj = val;
            else
                subs = s(1).subs;
                if s(1).type == '.'
                    if isa(obj, '{{packageName}}.ModelBase')
                        if isempty(obj.propMap_)
                            if isKey(obj.props_, subs)
                                obj.props_(subs) = {{packageName}}.ModelBase.recursiveAsgn(obj.props_(subs), s(2:end), val);
                            else
                                obj = builtin('subsasgn', obj, s, val);
                            end
                        else
                            if isKey(obj.propMap_, subs)
                                propName = obj.propMap_(subs);
                                obj.props_(propName) = {{packageName}}.ModelBase.recursiveAsgn(obj.props_(propName), s(2:end), val);
                            else
                                error('subsasgn', 'No property ' + subs + ' exists for class ' + class(obj));
                            end
                        end
                    else
                        obj.(subs) = {{packageName}}.ModelBase.recursiveAsgn(obj.(subs), s(2:end), val);
                    end
                elseif s(1).type == '{}'
                    if length(subs) > 1
                        error('subsasgn', 'Not a supported subscript annotation')
                    end
                    obj{subs{1}} = {{packageName}}.ModelBase.recursiveAsgn(obj{subs{1}}, s(2:end), val);
                else
                    for i = 1:length(subs)
                        obj(subs{i}) = {{packageName}}.ModelBase.recursiveAsgn(obj(subs{i}), s(2:end), val);
                    end
                end
            end
        end
        function result = recursiveRef(obj, s)
            if isempty(s)
                result = obj;
            else
                subs = s(1).subs;
                if s(1).type == '.'
                    if isa(obj, '{{packageName}}.ModelBase')
                        if isempty(obj.propMap_)
                            if isKey(obj.props_, subs)
                                result = {{packageName}}.ModelBase.recursiveRef(obj.props_(subs), s(2:end));
                            else
                                result = builtin('subsref', obj, s);
                            end
                        else
                            if isKey(obj.propMap_, subs)
                                propName = obj.propMap_(subs);
                                if isKey(obj.props_, propName)
                                    result = {{packageName}}.ModelBase.recursiveRef(obj.props_(propName), s(2:end));
                                else
                                    result = [];
                                end
                            else
                                result = builtin('subsref', obj, s);
                            end
                        end
                    else
                        result = {{packageName}}.ModelBase.recursiveRef(obj.(subs), s(2:end));
                    end
                elseif s(1).type == '{}'
                    if length(subs) > 1
                        error('subsref', 'Not a supported subscript annotation')
                    end
                    result = {{packageName}}.ModelBase.recursiveRef(obj{subs{1}}, s(2:end));
                else
                    for i = 1:length(subs)
                        result = {{packageName}}.ModelBase.recursiveRef(obj(subs{i}), s(2:end));
                    end
                end
            end
        end
        function result = cellmap(pred, list)
            if isstruct(list)
                result = arrayfun(pred, list, 'UniformOutput', false);
            elseif iscell(list)
                result = cellfun(pred, list, 'UniformOutput', false);
            elseif isempty(list)
                result = [];
            else
                result = { pred(list) };
            end
        end
    end
end
