% Flywheel - Global namespace for API calls
%
% Flywheel Properties:
%    apiClient - The api client instance
{{#apiInfo}}
{{#apis}}
%    {{classVarName}}{{#operations}}{{#tag}} - {{description}}{{/tag}}{{/operations}}
{{/apis}}
{{/apiInfo}}
%
% Flywheel Methods:
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{^vendorExtensions.x-sdk-download-url}}
%    {{operationId}}{{#summary}} - {{{.}}}{{/summary}}
{{/vendorExtensions.x-sdk-download-url}}
{{#vendorExtensions.x-sdk-download-url}}
%    {{.}}{{#summary}} - {{{.}}}{{/summary}}
{{/vendorExtensions.x-sdk-download-url}}
{{#description}}
%       {{{.}}}
{{/description}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
classdef Flywheel < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties(Constant)
        SDK_VERSION = '{{packageVersion}}';
    end
    properties
        apiClient
        {{#apiInfo}}
        {{#apis}}
        {{classVarName}}
        {{/apis}}
        {{/apiInfo}}
        checkVersion
    end
    methods
        function obj = Flywheel(apiKey, root, skipVersionCheck)
            obj.apiClient = {{packageName}}.ApiClient(apiKey);

            % Set root mode
            if exist('root', 'var') && root
                obj.apiClient.restClient.addDefaultParameter('root', 'true');
            end

            if exist('skipVersionCheck', 'var') && ~skipVersionCheck
                obj.checkVersion = true;
            else
                skipEnv = getenv('FLYWHEEL_SDK_SKIP_VERSION_CHECK');
                obj.checkVersion = strcmp('0', skipEnv) || strcmpi('false', skipEnv);
            end

            userAgent = sprintf('Flywheel SDK/%s (Matlab %s; %s)', {{packageName}}.Flywheel.SDK_VERSION, version, computer);
            obj.apiClient.restClient.setDefaultHeader('User-Agent', userAgent);

            {{#apiInfo}}
            {{#apis}}
            obj.{{classVarName}} = {{apiPackage}}.{{classname}}(obj.apiClient);
            {{/apis}}
            {{/apiInfo}}

            % Perform version check
            obj.apiClient.setVersionCheckFn(@() obj.performVersionCheck());
        end
        {{#apiInfo}}
        {{#apis}}
        {{#operations}}
        {{#operation}}
        {{^vendorExtensions.x-sdk-download-url}}
        function [returnData, resp] = {{operationId}}(obj, varargin)
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}(varargin{:});
        end
        {{/vendorExtensions.x-sdk-download-url}}
        {{! x-sdk-download-url is a special case where we need to construct and return a full url }}
        {{#vendorExtensions.x-sdk-download-url}}
        function [returnData, resp] = {{.}}(obj, varargin)
            [returnData, resp] = obj.{{classVarName}}.{{operationId}}(varargin{:}, 'ticket', true);
            if ~isempty(returnData)
                reqUrl = resp.getRequestUrl().toCharArray';
                {{! Url will look like: ".../files/filename.txt?ticket" so just append the equals. }}
                returnData = strcat(reqUrl, '=', returnData.ticket);
            end
        end
        {{/vendorExtensions.x-sdk-download-url}}
        {{/operation}}
        {{/operations}}
        {{/apis}}
        {{/apiInfo}}

{{>flywheel_methods}}

        function performVersionCheck(obj)
            sdkVersion = {{packageName}}.Flywheel.SDK_VERSION;
            [sdkMajor, sdkMinor] = obj.parseVersion(sdkVersion);
            releaseVersion = '';
            try
                serverVersion = obj.defaultApi.getVersion();
                releaseVersion = serverVersion.release;
            catch ME
            end

            [releaseMajor, releaseMinor] = obj.parseVersion(releaseVersion);

            % Log conditionals:
            % 1. Client or server version not set
            % 2. Major version mismatch
            % 3. SDK Minor version > Server Minor version (client features not available on server)
            % 4. SDK Minor version < Server Minor version (new features on server)
            showPackageVersion = false;

            if releaseMajor > 0 && sdkMajor > 0
                if sdkMajor ~= releaseMajor
                    if isempty(strfind(sdkVersion, 'dev'))
                        warning('Flywheel:versionMismatch', sprintf('Client version %s does not match server version %s. Please update your client version!', sdkVersion, releaseVersion));
                        showPackageVersion = true;
                    end
                elseif obj.checkVersion
                    if sdkMinor > releaseMinor
                        fprintf('Client version %s is ahead of server version %s. Not all client functionality will be supported by the server.\n', sdkVersion, releaseVersion);
                        showPackageVersion = true;
                    elseif sdkMinor < releaseMinor
                        fprintf('Client version %s is behind of server version %s. Please consider upgrading your client to access all available functionality.\n', sdkVersion, releaseVersion);
                        showPackageVersion = true;
                    end
                end
            elseif obj.checkVersion
                warning('Flywheel:versionUnavailable', 'Client or server version not available! This is an unsupported configuration!');
            end

            if showPackageVersion
                fprintf('Go to https://github.com/flywheel-io/core/releases to find a matching package for version: %s\n', releaseVersion);
            end
        end
        function [major, minor] = parseVersion(obj, s)
            if isempty(s)
                major = 0;
                minor = 0;
            else
                parts = strsplit(s, '[^\d\.]+', 'DelimiterType', 'RegularExpression');
                semver = parts{1};
                parts = strsplit(semver, '.');
                major = str2num(parts{1});
                minor = str2num(parts{2});
            end
        end
    end
end
