{{#operations}}
% {{classname}}{{#tag}} - {{description}}{{/tag}}
%
% {{classname}} Properties:
%    apiClient - ApiClient instance
%
% {{classname}} Methods
{{#operation}}
%    {{vendorExtensions.x-matlab-paddedOperationId}}{{#summary}} - {{{.}}}{{/summary}}
{{#description}}
%       {{{.}}}
{{/description}}
{{/operation}}
classdef {{classname}} < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        apiClient
        context_
    end
    methods
        function obj = {{classname}}(apiClient, context)
            obj.apiClient = apiClient;
            obj.context_ = context;
        end

{{#operation}}
        function [returnData, resp] = {{operationId}}(obj, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}varargin)
            % {{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}
            {{#sortParamsByRequiredFlag}}
            {{#allParams}}
            {{#required}}
            % {{paramName}} ({{dataType}}){{#description}}:{{{.}}}{{/description}}
            {{/required}}
            {{^required}}
            % {{paramName}} ({{dataType}}){{#description}}:{{{.}}}{{/description}}
            {{/required}}
            {{/allParams}}
            {{/sortParamsByRequiredFlag}}
            {{#vendorExtensions.x-sdk-download-file-param}}
            % {{.}} - Destination file path
            {{/vendorExtensions.x-sdk-download-file-param}}
            % returns: [{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}none{{/returnType}}, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            {{#sortParamsByRequiredFlag}}
            {{#allParams}}
            {{#required}}
            addRequired(x__inp, '{{paramName}}');
            {{/required}}
            {{^required}}
            addParameter(x__inp, '{{paramName}}', []);
            {{/required}}
            {{/allParams}}
            {{/sortParamsByRequiredFlag}}
            {{#vendorExtensions.x-sdk-download-file-param}}
            addRequired(x__inp, '{{.}}');
            addParameter(x__inp, 'OutputType', 'double');
            {{/vendorExtensions.x-sdk-download-file-param}}
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}varargin{:});

            % Path parameters
            pathParams = {};
            {{#pathParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                {{^isListContainer}}
                pathParams = [pathParams, '{{baseName}}', x__inp.Results.{{paramName}}];
                {{/isListContainer}}
                {{#isListContainer}}
                pathParams = {{packageName}}.ApiClient.formatParamCollection(pathParams, '{{baseName}}', x__inp.Results.{{paramName}}, '{{collectionFormat}}');
                {{/isListContainer}}
            end
            {{/pathParams}}

            % Query parameters
            queryParams = {};
            {{#queryParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                {{^isListContainer}}
                queryParams = [queryParams, '{{baseName}}', {{packageName}}.ApiClient.castParam(x__inp.Results.{{paramName}}, '{{dataType}}')];
                {{/isListContainer}}
                {{#isListContainer}}
                queryParams = {{packageName}}.ApiClient.formatParamCollection(queryParams, '{{baseName}}', x__inp.Results.{{paramName}}, '{{collectionFormat}}');
                {{/isListContainer}}
            {{#vendorExtensions.x-sdk-default}}
            else
                queryParams = [queryParams, '{{baseName}}', '{{.}}'];
            {{/vendorExtensions.x-sdk-default}}
            end
            {{/queryParams}}

            % Header parameters
            headers = {};
            {{#headerParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                {{^isListContainer}}
                headers = [headers, '{{baseName}}', x__inp.Results.{{paramName}}];
                {{/isListContainer}}
                {{#isListContainer}}
                headers = {{packageName}}.ApiClient.formatParamCollection(headers, '{{baseName}}', x__inp.Results.{{paramName}}, '{{collectionFormat}}');
                {{/isListContainer}}
            end
            {{/headerParams}}

            % Form parameters
            formParams = {};
            files = {};
            {{#formParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                {{#notFile}}
                {{^isListContainer}}
                formParams = [formParams, '{{baseName}}', x__inp.Results.{{paramName}}];
                {{/isListContainer}}
                {{#isListContainer}}
                formParams = {{packageName}}.ApiClient.formatParamCollection(formParams, '{{baseName}}', x__inp.Results.{{paramName}}, '{{collectionFormat}}');
                {{/isListContainer}}
                {{/notFile}}
                {{#isFile}}
                files = [files, {{packageName}}.FileSpec.parametrize(x__inp.Results.{{paramName}})];
                {{/isFile}}
            end
            {{/formParams}}

            % Body (as JSON)
            {{#bodyParam}}
            {{#isPrimitiveType}}
            body = x__inp.Results.{{paramName}};
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
            {{^isListContainer}}
            body = {{modelPackage}}.{{baseType}}.ensureIsInstance(x__inp.Results.{{paramName}});
            {{/isListContainer}}
            {{#isListContainer}}
            body = {{packageName}}.ModelBase.cellmap(@(x) {{modelPackage}}.{{baseType}}.ensureIsInstance(x), x__inp.Results.{{paramName}});
            {{/isListContainer}}
            {{/isPrimitiveType}}
            body = {{packageName}}.ApiClient.encodeJson(body.toJson());
            {{/bodyParam}}
            {{^bodyParam}}
            body = {};
            {{/bodyParam}}

            resp = obj.apiClient.callApi('{{httpMethod}}', '{{{path}}}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
            {{#responses}}
                {{#dataType}}
                case '{{code}}'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = {{packageName}}.ApiClient.getResponseJson(resp);
                    {{^isListContainer}}
                    returnData = {{modelPackage}}.{{dataType}}.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                    {{/isListContainer}}
                    {{#isListContainer}}
                    returnData = {{packageName}}.ModelBase.cellmap(@(x) {{modelPackage}}.{{baseType}}.fromJson(x, obj.context_), json);
                    {{/isListContainer}}
                {{/dataType}}
                {{#vendorExtensions.x-sdk-download-file-param}}
                case '{{code}}'
                    destFile = x__inp.Results.{{.}};
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                {{/vendorExtensions.x-sdk-download-file-param}}
            {{/responses}}
                otherwise
                    returnData = [];
            end
        end

{{/operation}}
    end
end
{{/operations}}