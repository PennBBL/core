{{#operations}}
classdef {{classname}}
    properties
        apiClient
    end
    methods
        function obj = {{classname}}(apiClient)
            obj.apiClient = apiClient;
        end

{{#operation}}
        function [returnData, status] = {{operationId}}(obj, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}varargin)
            % {{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}
            {{#sortParamsByRequiredFlag}}
            {{#allParams}}
            {{#required}}
            % {{paramName}} ({{dataType}}){{#description}}:{{{.}}}{{/description}}
            {{/required}}
            {{^required}}
            % {{paramName}} ({{dataType}}){{#description}}:{{{.}}}{{/description}}
            {{/required}}
            {{/allParams}}
            {{/sortParamsByRequiredFlag}}
            % returns: [{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}none{{/returnType}}, status]

            x__inp = inputParser;
            {{#sortParamsByRequiredFlag}}
            {{#allParams}}
            {{#required}}
            addRequired(x__inp, '{{paramName}}');
            {{/required}}
            {{^required}}
            addParameter(x__inp, '{{paramName}}', []);
            {{/required}}
            {{/allParams}}
            {{/sortParamsByRequiredFlag}}
            parse(x__inp, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}varargin{:});

            % Path parameters
            pathParams = {};
            {{#pathParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                pathParams = [pathParams, '{{baseName}}', x__inp.Results.{{paramName}}];
            end
            {{/pathParams}}

            % Query parameters
            queryParams = {};
            {{#queryParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                queryParams = [queryParams, '{{baseName}}', x__inp.Results.{{paramName}}];
            end
            {{/queryParams}}

            % Header parameters
            headers = {};
            {{#headerParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                headers = [headers, '{{baseName}}', x__inp.Results.{{paramName}}];
            end
            {{/headerParams}}

            % Form parameters
            formParams = {};
            files = {};
            {{#formParams}}
            if ~isempty(x__inp.Results.{{paramName}})
                {{#notFile}}
                formParams = [formParams, '{{baseName}}', x__inp.Results.{{paramName}}];
                {{/notFile}}
                {{#isFile}}
                files = [files, '{{baseName}}', x__inp.Results.{{paramName}}];
                {{/isFile}}
            end
            {{/formParams}}

            % Body (as JSON)
            {{#bodyParam}}
            {{! TODO: Handle collections? }}
            if isa(x__inp.Results.{{paramName}}, '{{baseType}}')
                body = x__inp.Results.{{paramName}};
            else
                body = {{baseType}}(x__inp.Results.{{paramName}});
            end
            body = ApiClient.encodeJson(body.toJson());
            {{/bodyParam}}
            {{^bodyParam}}
            body = {};
            {{/bodyParam}}

            resp = obj.apiClient.callApi('{{httpMethod}}', '{{{path}}}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
            {{#responses}}
                {{#dataType}}
                case '{{code}}'
                    json = ApiClient.getResponseJson(resp);
                    {{#isListContainer}}
                    returnData = arrayfun(@(x) {{baseType}}.fromJson(x), json, 'UniformOutput', false);
                    {{/isListContainer}}
                    {{^isListContainer}}
                    returnData = {{dataType}}.fromJson(json);
                    {{/isListContainer}}
                {{/dataType}}
            {{/responses}}
                otherwise
                    returnData = [];
            end
        end

{{/operation}}
    end
end
{{/operations}}