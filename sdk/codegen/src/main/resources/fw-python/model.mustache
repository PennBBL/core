# coding: utf-8

{{>partial_header}}

## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401

import six
{{#imports}}{{#-first}}
{{/-first}}
{{import}}  # noqa: F401,E501
{{/imports}}

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

{{#models}}
{{#model}}
{{#vendorExtensions.x-sdk-container-mixin}}
from .mixins import {{.}}
{{/vendorExtensions.x-sdk-container-mixin}}

{{#vendorExtensions.x-sdk-container-mixin}}
class {{classname}}({{.}}):
{{/vendorExtensions.x-sdk-container-mixin}}
{{^vendorExtensions.x-sdk-container-mixin}}
class {{classname}}(object):
{{/vendorExtensions.x-sdk-container-mixin}}
{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}{{/allowableValues}}
    swagger_types = {
{{#vars}}
        '{{name}}': '{{{datatype}}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }

    attribute_map = {
{{#vars}}
        '{{name}}': '{{baseName}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }

    rattribute_map = {
{{#vars}}
        '{{baseName}}': '{{name}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }
{{#discriminator}}

    discriminator_value_class_map = {
        {{#children}}'{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},
        {{/-last}}{{/children}}
    }
{{/discriminator}}

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}):  # noqa: E501
        """{{classname}} - a model defined in Swagger"""
{{#vars}}{{#-first}}
{{/-first}}
        self._{{name}} = None
{{/vars}}
        self.discriminator = {{#discriminator}}'{{discriminator}}'{{/discriminator}}{{^discriminator}}None{{/discriminator}}
        self.alt_discriminator = {{#vendorExtensions.x-alt-discriminator}}'{{.}}'{{/vendorExtensions.x-alt-discriminator}}{{^vendorExtensions.x-alt-discriminator}}None{{/vendorExtensions.x-alt-discriminator}}
{{#vars}}{{#-first}}
{{/-first}}
{{#required}}
        self.{{name}} = {{name}}
{{/required}}
{{^required}}
        if {{name}} is not None:
            self.{{name}} = {{name}}
{{/required}}
{{/vars}}

{{#vars}}
    @property
    def {{name}}(self):
        """Gets the {{name}} of this {{classname}}.

{{#description}}
        {{{description}}}
{{/description}}

        :return: The {{name}} of this {{classname}}.
        :rtype: {{datatype}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}):
        """Sets the {{name}} of this {{classname}}.

{{#description}}
        {{{description}}}
{{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.  # noqa: E501
        :type: {{datatype}}
        """

        self._{{name}} = {{name}}

{{/vars}}

    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        {{#vendorExtensions.x-sdk-positional-param}}
        if isinstance(value, (list, dict, {{classname}})):
            return value
        return {{classname}}({{.}}=value)
        {{/vendorExtensions.x-sdk-positional-param}}
        {{^vendorExtensions.x-sdk-positional-param}}
        return value
        {{/vendorExtensions.x-sdk-positional-param}}

    def return_value(self):
        """Unwraps return value from model"""
        {{#vendorExtensions.x-sdk-return}}
        return self.{{.}}
        {{/vendorExtensions.x-sdk-return}}
        {{^vendorExtensions.x-sdk-return}}
        return self
        {{/vendorExtensions.x-sdk-return}}

{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""

        discriminator_value = data.get(self.discriminator)
        if not discriminator_value and self.alt_discriminator:
            discriminator_value = data.get(self.alt_discriminator)
        return self.discriminator_value_class_map.get(discriminator_value.lower())

{{/discriminator}}
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
{{/model}}
{{/models}}
