class ContainerMixin(object):
    def __init__(self):
        self.__context = None

    def _set_context(self, context):
        self.__context = context

    def _invoke_api(self, fname, *args, **kwargs):
        if self.__context:
            fn = getattr(self.__context, fname, None)
            if fn:
                return fn(*args, **kwargs)
        return None

    def _invoke_container_api(self, fmt, *args, **kwargs):
        if self.__context:
            fname = fmt.format(self.container_type)
            fn = getattr(self.__context, fname, None)
            if fn:
                return fn(*args, **kwargs)
        return None

    def resolve_children(self):
        children = []
        for child_type in getattr(self, 'child_types', []):
            getter = getattr(self, 'get_{0}'.format(child_type), None)
            ret = getter() if getter is not None else None
            if isinstance(ret, list):
                children = children + ret

        return children

class TagMethods(object):
    def add_tag(self, tag):
        return self._invoke_container_api('add_{0}_tag', self.id, tag)

    def rename_tag(self, tag, new_tag):
        return self._invoke_container_api('rename_{0}_tag', self.id, tag, new_tag)

    def delete_tag(self, tag):
        return self._invoke_container_api('delete_{0}_tag', self.id, tag)


class PermissionMethods(object):
    def add_permission(self, permission):
        return self._invoke_container_api('add_{0}_permission', self.id, permission)

    def update_permission(self, user_id, permission):
        return self._invoke_container_api('modify_{0}_user_permission', self.id, user_id, permission)

    def delete_permission(self, user_id):
        return self._invoke_container_api('delete_{0}_user_permission', self.id, user_id)


class FileMethods(object):
    def upload_file(self, file):
        return self._invoke_container_api('upload_file_to_{0}', self.id, file)

    def download_file(self, file_name, dest_file):
        return self._invoke_container_api('download_file_from_{0}', self.id, file_name, dest_file)

    def get_download_url(self, file_name):
        return self._invoke_container_api('get_{0}_download_url', self.id, file_name)

    def get_file_data(self, file_name):
        return self._invoke_container_api('download_file_from_{0}_as_data', self.id, file_name)


class GroupMixin(ContainerMixin, TagMethods, PermissionMethods):
    @property
    def container_type(self):
        return 'group'

    @property
    def child_types(self):
        return ['projects']

    def update_context(self, context):
        context.update({
            'group': self.id,
            'group_label': self.label
        })

    def get_projects(self):
        return self._invoke_api('get_group_projects', self.id)


class ProjectMixin(ContainerMixin, TagMethods, PermissionMethods, FileMethods):
    @property
    def container_type(self):
        return 'project'

    @property
    def child_types(self):
        return ['sessions', 'analyses', 'files']

    def update_context(self, context):
        context.update({
            'project': self.id,
            'project_label': self.label
        })

    def get_sessions(self):
        return self._invoke_api('get_project_sessions', self.id)

    def get_analyses(self):
        analyses = getattr(self, 'analyses', None)
        if analyses:
            return analyses
        return self._invoke_api('get_project_analyses', self.id)

    def get_files(self):
        return self.files


class SessionMixin(ContainerMixin, TagMethods, FileMethods):
    @property
    def container_type(self):
        return 'session'

    @property
    def child_types(self):
        return ['acquisitions', 'analyses', 'files']

    def update_context(self, context):
        context.update({
            'session': self.id,
            'session_label': self.label
        })

        if self.subject:
            context.update({
                'subject': self.subject.id,
                'subject_code': self.subject.code
            })

    def get_acquisitions(self):
        return self._invoke_api('get_session_acquisitions', self.id)

    def get_analyses(self):
        analyses = getattr(self, 'analyses', None)
        if analyses:
            return analyses
        return self._invoke_api('get_session_analyses', self.id)

    def get_files(self):
        return self.files


class AcquisitionMixin(ContainerMixin, TagMethods, FileMethods):
    @property
    def container_type(self):
        return 'acquisition'

    @property
    def child_types(self):
        return ['analyses', 'files']

    def update_context(self, context):
        context.update({
            'acquisition': self.id,
            'acquisition_label': self.label
        })

    def get_analyses(self):
        analyses = getattr(self, 'analyses', None)
        if analyses:
            return analyses
        return self._invoke_api('get_acquisition_analyses', self.id)

    def get_files(self):
        return self.files


class AnalysisMixin(ContainerMixin, TagMethods, FileMethods):
    @property
    def container_type(self):
        return 'analysis'

    @property
    def child_types(self):
        return ['files']

    def update_context(self, context):
        context.update({
            'analysis': self.id,
            'analysis_label': self.label
        })

    def get_files(self):
        return self.files


class FileMixin(ContainerMixin):
    @property
    def container_type(self):
        return 'file'