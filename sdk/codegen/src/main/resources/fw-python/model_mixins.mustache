class ContainerMixin(object):
    def __init__(self):
        self.__context = None

    def _set_context(self, context):
        self.__context = context

    def _invoke_api(self, fname, *args, **kwargs):
        if self.__context:
            fn = getattr(self.__context, fname, None)
            if fn:
                return fn(*args, **kwargs)
        return None

    def resolve_children(self):
        children = []
        for child_type in getattr(self, 'child_types', []):
            getter = getattr(self, 'get_{0}'.format(child_type), None)
            ret = getter() if getter is not None else None
            if isinstance(ret, list):
                children = children + ret

        return children

class GroupMixin(ContainerMixin):
    @property
    def container_type(self):
        return 'group'

    @property
    def child_types(self):
        return ['projects']

    def update_context(self, context):
        context.update({
            'group': self.id,
            'group_label': self.label
        })

    def get_projects(self):
        return self._invoke_api('get_group_projects', self.id)


class ProjectMixin(ContainerMixin):
    @property
    def container_type(self):
        return 'project'

    @property
    def child_types(self):
        return ['sessions', 'analyses', 'files']

    def update_context(self, context):
        context.update({
            'project': self.id,
            'project_label': self.label
        })

    def get_sessions(self):
        return self._invoke_api('get_project_sessions', self.id)

    def get_analyses(self):
        analyses = getattr(self, 'analyses', None)
        if analyses:
            return analyses
        return self._invoke_api('get_project_analyses', self.id)

    def get_files(self):
        return self.files


class SessionMixin(ContainerMixin):
    @property
    def container_type(self):
        return 'session'

    @property
    def child_types(self):
        return ['acquisitions', 'analyses', 'files']

    def update_context(self, context):
        context.update({
            'session': self.id,
            'session_label': self.label
        })

        if self.subject:
            context.update({
                'subject': self.subject.id,
                'subject_code': self.subject.code
            })

    def get_acquisitions(self):
        return self._invoke_api('get_session_acquisitions', self.id)

    def get_analyses(self):
        analyses = getattr(self, 'analyses', None)
        if analyses:
            return analyses
        return self._invoke_api('get_session_analyses', self.id)

    def get_files(self):
        return self.files


class AcquisitionMixin(ContainerMixin):
    @property
    def container_type(self):
        return 'acquisition'

    @property
    def child_types(self):
        return ['analyses', 'files']

    def update_context(self, context):
        context.update({
            'acquisition': self.id,
            'acquisition_label': self.label
        })

    def get_analyses(self):
        analyses = getattr(self, 'analyses', None)
        if analyses:
            return analyses
        return self._invoke_api('get_acquisition_analyses', self.id)

    def get_files(self):
        return self.files


class AnalysisMixin(ContainerMixin):
    @property
    def container_type(self):
        return 'analysis'

    @property
    def child_types(self):
        return ['files']

    def update_context(self, context):
        context.update({
            'analysis': self.id,
            'analysis_label': self.label
        })

    def get_files(self):
        return self.files


class FileMixin(ContainerMixin):
    @property
    def container_type(self):
        return 'file'