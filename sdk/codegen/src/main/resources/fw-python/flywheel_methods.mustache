    def add_nodes_to_collection(self, collection_id, level, node_ids, **kwargs):
        update = {
            'contents': {
                'operation': 'add',
                'nodes': [ {'_id': id, 'level': level} for id in node_ids ]
            }
        }
        return self.collections_api.modify_collection(collection_id, update, **kwargs)

    def add_sessions_to_collection(self, collection_id, session_ids, **kwargs):
        return self.add_nodes_to_collection(collection_id, 'session', session_ids, **kwargs)

    def add_acquisitions_to_collection(self, collection_id, acquisition_ids, **kwargs):
        return self.add_nodes_to_collection(collection_id, 'acquisition', acquisition_ids, **kwargs)

    def change_job_state(self, job_id, state):
        return self.modify_job(job_id, { 'state': state })

    def resolve(self, path):
        if not isinstance(path, list):
            path = path.split('/')

        return self.resolve_path(flywheel.ResolverInput(path=path))

    {{#apis}}
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions.x-sdk-modify-info}}
    def {{wrapperId}}(self, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs):
        body = { '{{key}}': body }
        self.{{classVarName}}.{{operationId}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs)

    {{/vendorExtensions.x-sdk-modify-info}}
    {{#vendorExtensions.x-sdk-download-file-param}}
    def {{operationId}}_as_data(self, {{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs):
        kwargs['_return_http_data_only'] = True
        kwargs['_preload_content'] = False
        (resp) = self.{{classVarName}}.{{operationId}}_with_http_info({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}**kwargs)
        if resp:
            return resp.content
        return None

    {{/vendorExtensions.x-sdk-download-file-param}}
    {{/operation}}
    {{/operations}}
    {{/apis}}
