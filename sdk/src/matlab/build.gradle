import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

/*
 * Introduction: There are no specifications for matlab toolboxes that I could find, so I had to
 * reverse engineer the toolbox zipfile format by creating the toolbox in Matlab, then inspecting
 * the contents. The source files in the toolbox/ folder are copies of the metadata files generated
 * by matlab.
 *
 * We use the JSONio package so that we have consistent JSON parsing for each matlab version, and 
 * can perform hex conversions in the rare cases that it is necessary. (i.e. struct fields cannot 
 * have special characters such as dots or dashes, and must be escaped using hex values)
 *
 * We use a custom Java based RestClient in order to have a consistent, cross-platform interface 
 * across matlab  versions to make Rest calls where we can control and read headers, query parameters, etc.
 *
 * The matlab toolbox is built with the following steps:
 * 1. Generate the SDK code using swagger (generateApi task)
 * 2. Create an intermediate directory from the toolbox/ source folder, with the structure:
 *      _rels/ - Matlab metadata folder that describes the metadata files in the toolbox
 *      fsroot/ - The actual filesystem contents
 *      metadata/ - The metadata files
 *      metadata/configuration.xml - Contains the matlab and java classpath entries to be added to 
 *          the path, relative to fsroot.
 *      metadata/coreProperties.xml - Contains version number and build timestamps.
 *      metadata/filesystemManifest.xml - Contains a list of files in the filesystem with
 *          permissions and timestamps.
 * 3. Populate the fsroot folder with:
 *      The rest client jar file
 *      The generated SDK source code (under the +flywheel package)
 *      The JSONio source code (under the +jsonio package)
 * 4. Generate the metadata files described above (configureXml step)
 * 5. Zip the entire contents of the intermediate directory into the toolbox.
 */

def customCodegenJar = project(':custom-swagger-codegen').jar.archivePath
def templateDir = file('../../codegen/src/main/resources/matlab').path

def toolboxDir = file('toolbox').path

def intDir = file('build/intermediate').path
def swaggerOutputDir = file('build/gen')
def fsrootDir = intDir + '/fsroot'

def dateToIso(date) {
	return date.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"));
}

def configureXml(path, fn) {
	def parser = new XmlParser(false, true)
	def root = parser.parse(path)

	fn(root)

	def writer = new PrintWriter(new FileWriter(path)) 
	writer.print('<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>')

	// Printer that doesn't write newlines or whitespace
	def printer = new XmlNodePrinter(writer, '') {
		@Override
		protected void printLineEnd(String comment) {
			out.flush()
		}
	}
	printer.preserveWhitespace = false
	printer.print(root)
	writer.close()
}

task generateApi(dependsOn: ':custom-swagger-codegen:jar') {
	inputs.file(swaggerInputSpec)
	outputs.dir(swaggerOutputDir)

	doLast {
		// Swagger uses ServiceLoader to load the list modules. This in turn relies on the context class loader
		// It's not pretty, but I haven't found a better way to load our module at runtime
		def scriptHandler = project.getBuildscript()
		def loader = scriptHandler.getClassLoader()
		def myLoader = new java.net.URLClassLoader([customCodegenJar.toURL()] as URL[], loader)
		Thread.currentThread().setContextClassLoader(myLoader)

		def config = new CodegenConfigurator()
		config.setInputSpec(swaggerInputSpec)
		config.setOutputDir(swaggerOutputDir.path)
		// Also have to re-specify the template dir because swagger isn't finding it from the classpath
		config.setTemplateDir(templateDir)
		config.setLang('matlab')
		config.addAdditionalProperty("packageName", "flywheel")
		config.addAdditionalProperty("packageVersion", project.version)

		new DefaultGenerator().opts(config.toClientOptInput()).generate()
	}
}

task copyRestApi(type: Copy, dependsOn: ':rest-client:jar') {
	from project(':rest-client').jar.archivePath
	into { fsrootDir + '/api' }
}

task copySwaggerApi(type: Copy, dependsOn: generateApi) {
	from(swaggerOutputDir) {
		include '**/*'
		exclude '.swagger-codegen/**'
		exclude '.swagger-codegen-ignore'
		exclude 'sphinx/**'
	}
	into { fsrootDir }
}

task copyToolboxFiles(type: Copy) {
	from 'toolbox/' 
	into { intDir }
}

task copyJSONio(type: Copy) {
	from ('JSONio/') {
		include 'jsonread.m*'
		include 'jsonwrite.m'
		include 'LICENSE'
	}
	into { fsrootDir + '/+jsonio' }
}

task copyReadme(type: Copy) {
	from 'ZIP-README.txt'
	into { fsrootDir }
	rename '.*', 'README'
}

task configureToolbox(dependsOn: [copyToolboxFiles, copyRestApi, copySwaggerApi, copyJSONio, copyReadme]) {
	doLast {
		def isoDate = dateToIso(new Date())

		// Configure configuration.xml
		configureXml(intDir + '/metadata/configuration.xml', { root -> 
			root.javaClassPaths[0]?.appendNode('javaClassPath', [:], '/api/' + project(':rest-client').jar.archiveName) 
			root.matlabPaths[0]?.appendNode('matlabPath', [:], '/')
		})

		// Configure core properties
		configureXml(intDir + '/metadata/coreProperties.xml', { root ->
			root.'cp:version'[0].value = "${project.version}"
			root.'dcterms:created'[0].value = isoDate
			root.'dcterms:modified'[0].value = isoDate
		})

		// Write filesystem manifest
		configureXml(intDir + '/metadata/filesystemManifest.xml', { root ->
			FileTree tree = fileTree(fsrootDir)
			tree.visit{ element ->
				if( !element.isDirectory() && element.name != 'README' ) {
					def f = element.getFile();
					// Hardcoded permissions - would these ever change?
					def modified = dateToIso(new Date(f.lastModified()))
					root.appendNode('fileEntry', [
						content: "/fsroot/$element.relativePath",
						date: modified,
						name: "/$element.relativePath",
						permissions: '0644',
						type: 'File'
					])
				}
			}
		})
	}
}

task buildToolbox(type: Zip, dependsOn: configureToolbox) {
	baseName = 'flywheel-sdk'
	extension = 'mltbx'
	exclude 'fsroot/README'
	from intDir
}

task buildZip(type: Zip, dependsOn: configureToolbox) {
	baseName = 'flywheel-matlab-sdk'
	from fsrootDir
	into 'flywheel-sdk'
	rename 'rest-client-.+\\.jar', 'rest-client.jar'
}

artifacts {
	archives buildToolbox
	archives buildZip
}

clean.doFirst {
	delete(swaggerOutputDir)
	delete(fsrootDir)
}

	

